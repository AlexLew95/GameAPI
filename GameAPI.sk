#======================================
#========= GameAPI by AlexLew =========
#============ Version 1.0 =============
#======================================

#===================================================== Utilities =====================================================

options:
	name : GameAPI
	version : 1.3

function send():
	send " " to console
	send "&a[{@name}] &e-_-_-_-_-_-_-_-_ &a{@name} &e-_-_-_-_-_-_-_-_" to console
	send "&a[{@name}]" to console
	send "&a[{@name}] Version {@version}" to console
	send "&a[{@name}] by AlexLew" to console
	send "&a[{@name}] Documentation : https://github.com/AlexLew95/GameAPI/wiki/Syntax" to console
	send " " to console
	send "&a[{@name}] &eYour addons > &f%addons list%" to console
	send " " to console

on skript load:
	if online state of url "https://raw.githubusercontent.com/AlexLew95/GameAPI/master/version" is true:
		if line 1 from url "https://raw.githubusercontent.com/AlexLew95/GameAPI/master/version" is not "{@version}":
			send "&a[{@name}] New version avaible!" to console
	if file "plugins/{@name}" is a dir:
		create dir "plugins/{@name}"
	send()


on command "/GameAPI":
	if sender is a player:
		if sender is op:
			send "&a[{@name}] Version {@version}" to sender
			send "&a[{@name}] by AlexLew" to sender
			send "&a[{@name}] Documentation : https://github.com/AlexLew95/GameAPI/wiki/Syntax" to sender
	else if sender is console:
		send "&a[{@name}] Version {@version}" to sender
		send "&a[{@name}] by AlexLew" to sender
		send "&a[{@name}] Documentation : https://github.com/AlexLew95/GameAPI/wiki/Syntax" to sender
		
#===================================================== Effects =====================================================

#===== Load minis-games =====

effect load [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_namemg} to expression-1
	set {_session} to expression-2
	if yaml "plugins/GameAPI/%{_namemg}%.yml" is not loaded:
		if {_session} is set:
			set {_namemg} to {_session}
		load yaml "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"

#===== Remove a mini game =====

effect remove [[the] mini[s](-| )game[s]] mini game %string%:
	set {_namemg} to expression-1
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if yaml "%{_namemg}%" is loaded:
			unload yaml "%{_namemg}%"
		delete file "plugins/GameAPI/%{_namemg}%.yml"
		call custom event "mini game deleted" to details {_namemg}

#===== Create a minigame or team =====

effect create [[(a|the)] [team] [named] %-string% for] [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if {_name} is set:
		if file "plugins/GameAPI/%{_namemg}%.yml" exists:
			if {_session} is set:
				set {_namemg} to {_session}
			if yaml "%{_namemg}%" is not loaded:	
				load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
			if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.ID" from "%{_namemg}%" doesn't have value:
				set {_listnodes::*} to skript-yaml nodes "GameAPI.%{_namemg}%.Teams" from "%{_namemg}%"
				loop 1 times:
					if (amount of {_listnodes::*}) > 0:
						set {_id} to amount of {_listnodes::*}
					else:
						set {_id} to 1
				set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Name" from "%{_namemg}%" to {_name}
				set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.ID" from "%{_namemg}%" to {_id}
				save yaml "%{_namemg}%"
				set {_details::*} to {_name} and {_namemg}
				set {gameapi::lastteam} to "%{_name}%"
				call custom event "team created" to details {_details::*}
	else if file "plugins/GameAPI/%{_namemg}%.yml" doesn't exist:
		create file "plugins/GameAPI/%{_namemg}%.yml"
		load yaml "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set skript-yaml value "GameAPI.%{_namemg}%.Started" from "%{_namemg}%" to false
		save yaml "%{_namemg}%"
		set {gameapi::lastminigame} to "%{_namemg}%"
		call custom event "mini game created" to details {_namemg}
				
#===== Remove a team =====

effect remove [the] team [named] %string% from [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		delete skript-yaml nodes "GameAPI.%{_namemg}%.Teams.Team_%{_name}%" from "%{_namemg}%"
		save yaml "%{_namemg}%"
		set {_details::*} to {_name} and {_namemg}
		set {gameapi::lastteam} to "%{_name}%"
		call custom event "team deleted" to details {_details::*}

#===== Leave a mini game =====

effect make %player% leave [[the|] mini[s](-| )game[s] [named]] %string%:
	delay the current effect
	wait 1 second
	set {_player} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "plugins/GameAPI/%{_namemg}%.yml" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set {_listnodes::*} to skript-yaml nodes "GameAPI.%{_namemg}%.Teams" from "%{_namemg}%"
		loop {_listnodes::*}:
			set {_listplayer::*} to skript-yaml list "GameAPI.%{_namemg}%.Teams.%loop-value%.Players" from "%{_namemg}%"
			loop {_listplayer::*}:
				if loop-value-2 is "%{_player}%":
					remove "%{_player}%" from skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
					exit loop
		save yaml "%{_namemg}%"
		set {_details::*} to {_player} and {_namemg}
		set {gameapi::lastminigame} to "%{_namemg}%"
		call custom event "player left mini game" to details {_details::*}

#===== Join a mini game or team =====

effect make %players% join [[[the] team] %-string% (from|of)] [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	delay the current effect
	wait 1 second
	set {_players::*} to expression-1
	set {_name} to expression-2
	set {_namemg} to expression-3
	set {_session} to expression-4
	set {_details::*} to {_players::*} and {_namemg}
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		loop 1 times:
			if {_session} is set:
				set {_namemg} to {_session}
			if yaml "%{_namemg}%" is not loaded:	
				load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		if {_name} is set:
			if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%" has value:
				set {_listnodes::*} to skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
				loop {_listnodes::*}: #loop-value-1
					loop {_players::*}: #loop-value-2
						if loop-value-1 is loop-value-2:
							remove "%loop-value-2%" from skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
						add "%loop-value-2%" to skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
				save yaml "%{_namemg}%"
				set {gameapi::lastteam} to "%{_name}%"
				call custom event "player joined team" to details {_details::*}
				return
			else:
				loop {_players::*}:
					add "%loop-value%" to skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
				save yaml "%{_namemg}%"
				set {gameapi::lastteam} to "%{_name}%"
				call custom event "player joined team" to details {_details::*}
				return
		else if skript-yaml node "GameAPI.%{_namemg}%.Players" from "%{_namemg}%" has value:
			set {_listnodes::*} to skript-yaml node "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			loop {_listnodes::*}: #loop-value-1
				loop {_players::*}: #loop-value-2
					if loop-value-1 is loop-value-2:
						remove "%loop-value-2%" from skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
					add "%loop-value-2%" to skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			save yaml "%{_namemg}%"
			set {gameapi::lastteam} to "%{_name}%"
			call custom event "player joined mini game" to details {_details::*}
			return
		else:
			loop {_players::*}:
				add "%loop-value%" to skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			save yaml "%{_namemg}%"
			set {gameapi::lastteam} to "%{_name}%"
			call custom event "player joined mini game" to details {_details::*}
			return

#===== Leave a mini game or team =====

effect make %player% leave [[[the] team] %-string% (from|of)] [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	delay the current effect
	wait 1 second
	set {_players::*} to expression-1
	set {_name} to expression-2
	set {_namemg} to expression-3
	set {_session} to expression-4
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		loop 1 times:
			if {_session} is set:
				set {_namemg} to {_session}
			if yaml "%{_namemg}%" is not loaded:	
				load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		if {_name} is set:
			if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%" has value:
				set {_listnodes::*} to skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
				loop {_listnodes::*}: #loop-value-1
					loop {_players::*}: #loop-value-2
						if loop-value-1 is loop-value-2:
							remove "%loop-value-2%" from skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
						add "%loop-value-2%" to skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
				save yaml "%{_namemg}%"
				set {gameapi::lastminigame} to "%{_namemg}%"
				call custom event "player left team" to details {_details::*}
				return
			else:
				loop {_players::*}:	#loop-value-1
					add "%loop-value-1%" to skript-yaml list "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Players" from "%{_namemg}%"
				save yaml "%{_namemg}%"
				set {gameapi::lastminigame} to "%{_namemg}%"
				call custom event "player left team" to details {_details::*}
				return
		else if skript-yaml node "GameAPI.%{_namemg}%.Players" from "%{_namemg}%" has value:
			set {_listnodes::*} to skript-yaml node "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			loop {_listnodes::*}: #loop-value-1
				loop {_players::*}: #loop-value-2
					if loop-value-1 is loop-value-2:
						remove "%loop-value-2%" from skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
					add "%loop-value-2%" to skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			save yaml "%{_namemg}%"
			set {gameapi::lastminigame} to "%{_namemg}%"
			call custom event "player left mini game" to details {_details::*}
			return
		else:
			loop {_players::*}:
				add "%loop-value-1%" to skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			save yaml "%{_namemg}%"
			set {gameapi::lastminigame} to "%{_namemg}%"
			call custom event "player left mini game" to details {_details::*}
			return

#===== Start a mini game ======

effect start [[the] mini[s](-| )game[s] [named]] %string% [(0¦with title)] [using session %-string%]:
	delay the current effect
	wait 1 second
	set {_namemg} to expression-1
	set {_session} to expression-2
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if skript-yaml value "GameAPI.%{_namemg}%.Started" from "%{_namemg}%" is false:
			set {_unknows::*} to skript-yaml list "GameAPI.%{_namemg}%.Players" from "%{_namemg}%"
			set {_listnodes::*} to skript-yaml nodes "GameAPI.%{_namemg}%.Teams" from "%{_namemg}%"
			set {_unknows} to amount of {_unknows::*}
			set {_teams} to amount of {_listnodes::*}
			set {_t} to {_unknows} / {_teams}
			if "%{_t}%" contains "." or ",":
				set {_t} to ceil({_t})
			set {_index} to 1
			loop {_teams} times:
				loop {_t} times:
					loop {_unknows::*}:
						add "%loop-value-3%" to skript-yaml list "GameAPI.%{_namemg}%.Teams.%{_listnodes::%{_index}%}%" from "%{_namemg}%"
					if {_index} < {_teams}:
						add 1 to {_index}
			loop {_listnodes::*}:
				set {_world} to skript-yaml value "GameAPI.%{_namemg}%.Teams.%loop-value%.Spawn.__skriptclass__.location.world" from "%{_namemg}%"
				set {_x} to skript-yaml value "GameAPI.%{_namemg}%.Teams.%loop-value%.Spawn.__skriptclass__.location.x" from "%{_namemg}%"
				set {_y} to skript-yaml value "GameAPI.%{_namemg}%.Teams.%loop-value%.Spawn.__skriptclass__.location.y" from "%{_namemg}%"
				set {_z} to skript-yaml value "GameAPI.%{_namemg}%.Teams.%loop-value%.Spawn.__skriptclass__.location.z" from "%{_namemg}%"
				set {_players::*} to skript-yaml value "GameAPI.%{_namemg}%.Teams.%loop-value%.Players" from "%{_namemg}%"
				loop {_players::*}:	
					teleport loop-value-2 to location({_x}, {_y}, {_z}, {_world})
		return
	
#===================================================== Expressions =====================================================

#===== Random Team =====

get expression [a] random team (of|from) %string% [using session %-string%]:
	set {_namemg} to expression-1
	if file "plugins/GameAPI/%expression-1%.yml" exists:
		if expression-2 is set:
			set {_namemg} to expression-2
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set {_listnodes::*} to skript-yaml nodes "GameAPI.%{_namemg}%.Teams" from "%{_namemg}%"
		replace all "Team_" with "" in {_listnodes::*}
		set {_random} to a random element of {_listnodes::*}
		return {_random}
	else:
		return false

#===== Minimum of player in a mini game + team =====

get expression [the] min[imum] [of] [player] [(of|from) [team] %-string%] (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastteam} to "%{_namemg}%"
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		loop 1 times:
			if {_name} is set:
				if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Minimum_player" from "%{_namemg}%" has value:
					set {_min} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Minimum_player" from "%{_namemg}%"
				else:
					return false
			else:
				if skript-yaml node "GameAPI.%{_namemg}%.Minimum_player" from "%{_namemg}%" has value:
					set {_min} to skript-yaml value "GameAPI.%{_namemg}%.Minimum_player" from "%{_namemg}%"
				else:
					return false
		return {_min}

change expression [the] min[imum] [of] [player] [(of|from) [team] %-string%] (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		("%change value%") parsed as integer is set
		change mode is to set:
			set {_cv} to change value
			set {_details::*} to {_cv}, {_name} and {_namemg}
			loop 1 times:
				if {_name} is set:
					set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Minimum_player" from "%{_namemg}%" to {_cv}
					save yaml "%{_namemg}%"
					set {gameapi::lastteam} to "%{_name}%"
					call custom event "minimum player set in team" to details {_details::*}
				else:
					set skript-yaml value "GameAPI.%{_namemg}%.Minimum_player" from "%{_namemg}%" to {_cv}
					save yaml "%{_namemg}%"
					set {gameapi::lastminigame} to "%{_namemg}%"
					call custom event "minimum player set in mini-game" to details {_details::*}

#===== Maximum of player in a mini game + team =====

get expression [the] max[imum] [of] [player] [(of|from) [team] %-string%] (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		loop 1 times:
			if {_name} is set:
				if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Maximum_player" from "%{_namemg}%" has value:
					set {_max} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Maximum_player" from "%{_namemg}%"
					set {gameapi::lastteam} to "%{_name}%"
				else:
					return false
			else:
				if skript-yaml node "GameAPI.%{_namemg}%.Maximum_player" from "%{_namemg}%" has value:
					set {_max} to skript-yaml value "GameAPI.%{_namemg}%.Maximum_player" from "%{_namemg}%"
					set {gameapi::lastminigame} to "%{_namemg}%"
				else:
					return false
		return {_max}

change expression [the] max[imum] [of] [player] [(of|from) [team] %-string%] (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		("%change value%") parsed as integer is set
		change mode is to set:
			set {_cv} to change value
			set {_details::*} to {_cv}, {_name} and {_namemg}
			loop 1 times:
				if {_name} is set:
					set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Maximum_player" from "%{_namemg}%" to {_cv}
					save yaml "%{_namemg}%"
					set {gameapi::lastteam} to "%{_name}%"
					call custom event "minimum player set in team" to details {_details::*}
				else:
					set skript-yaml value "GameAPI.%{_namemg}%.Maximum_player" from "%{_namemg}%" to {_cv}
					save yaml "%{_namemg}%"
					set {gameapi::lastminigame} to "%{_namemg}%"
					call custom event "maximum player set in mini-game" to details {_details::*}
				
#===== Points =====

get expression point[s] (of|for) [[the] team] %string% (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Points" from "%{_namemg}%" has value:
			set {_points} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Points" from "%{_namemg}%"
			set {gameapi::lastteam} to "%{_name}%"
		return {_points}
	else:
		return false

change expression point[s] (of|for) [[the] team] %string% (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastteam} to "%{_name}%"
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		("%change value%") parsed as integer is set
		set {_points} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Points" from "%{_namemg}%"
		change mode is to add:
			set {_cv} to change value
			set {_details::*} to {_cv}, {_name} and {_namemg}
			set {_points2} to {_cv} + {_points}
			set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Points" from "%{_namemg}%" to {_points2}
			save yaml "%{_namemg}%"
			call custom event "team won points" to details {_details::*}
		change mode is to set or to reset:
			set {_cv} to change value
			set {_details::*} to {_cv}, {_name} and {_namemg}
			set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Points" from "%{_namemg}%" to {_cv}
			save yaml "%{_namemg}%"
			call custom event "team reset points" to details {_details::*}

#===== Spawn of a team + mini game =====

get plural expression spawn [of [[the] team] %-string%] (of|from) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		if {_name} is set:
			if skript-yaml node "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn" from "%{_namemg}%" has value:	
				set {_world} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn.__skriptclass__.location.world" from "%{_namemg}%"
				set {_x} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn.__skriptclass__.location.x" from "%{_namemg}%"
				set {_y} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn.__skriptclass__.location.y" from "%{_namemg}%"
				set {_z} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn.__skriptclass__.location.z" from "%{_namemg}%"
				set {_yaw} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn.__skriptclass__.location.yaw" from "%{_namemg}%"
				set {_pitch} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn.__skriptclass__.location.pitch" from "%{_namemg}%"
				set {_spawn::*} to {_world}, {_x}, {_y}, {_z}, {_yaw} and {_pitch}
				set {gameapi::lastteam} to "%{_name}%"
			else:
				return false
		else:
			if skript-yaml node "GameAPI.%{_namemg}%.Spawn" from "%{_namemg}%" has value:
				set {_world} to skript-yaml value "GameAPI.%{_namemg}%.Spawn.__skriptclass__.location.world" from "%{_namemg}%"
				set {_x} to skript-yaml value "GameAPI.%{_namemg}%.Spawn.__skriptclass__.location.x" from "%{_namemg}%"
				set {_y} to skript-yaml value "GameAPI.%{_namemg}%.Spawn.__skriptclass__.location.y" from "%{_namemg}%"
				set {_z} to skript-yaml value "GameAPI.%{_namemg}%.Spawn.__skriptclass__.location.z" from "%{_namemg}%"
				set {_yaw} to skript-yaml value "GameAPI.%{_namemg}%.Spawn.__skriptclass__.location.yaw" from "%{_namemg}%"
				set {_pitch} to skript-yaml value "GameAPI.%{_namemg}%.Spawn.__skriptclass__.location.pitch" from "%{_namemg}%"
				set {_spawn::*} to {_world}, {_x}, {_y}, {_z}, {_yaw} and {_pitch}
				set {gameapi::lastminigame} to "%{_namemg}%"
			else:
				return false
		return {_spawn::*}

change plural expression spawn [of [[the] team] %-string%] (of|from) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		change mode is to set:
			set {_cv} to change value
			if {_cv} is location:
				set {_details::*} to {_cv}, {_name} and {_namemg}
				if {_name} is set:
					set skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_%{_name}%.Spawn" from "%{_namemg}%" to {_cv}
					save yaml "%{_namemg}%"
					set {gameapi::lastteam} to "%{_name}%"
					call custom event "spawn of team set" to details {_details::*}
				else:
					set skript-yaml value "GameAPI.%{_namemg}%.Spawn" from "%{_namemg}%" to {_cv}
					save yaml "%{_namemg}%"
					set {gameapi::lastminigame} to "%{_namemg}%"
					call custom event "spawn of mini-game set" to details {_details::*}

#===== Team or mini game of player =====

get expression (0¦[the] team|1¦[the] mini[s](-| )game[s]) of %player%:
	set {_player} to expression-1
	set {_rp::*} to relative path of "%directory ""plugins/GameAPI/""'s files%"
	loop {_rp::*}:
		add name of file "%loop-value%" to {_namemg::*}
	loop {_namemg::*}:
		switch parse mark:
			case 0:
				set {_listnodes::*} to skript-yaml nodes "GameAPI.%loop-value%.Teams" from "%loop-value%"
				loop {_listnodes::*}:
					if skript-yaml node "GameAPI.%loop-value-1%.Teams.%loop-value-2%.Players" from "%loop-value-1%" has value:
						set {_listplayer::*} to skript-yaml list "GameAPI.%loop-value-1%.Teams.%loop-value-2%.Players" from "%loop-value-1%"
						loop {_listplayer::*}:
							if loop-value-3 is "%{_player}%":
								set {_team} to loop-value-2
								replace all "Team_" with "" in {_team}
						set {gameapi::lastteam} to "%{_name}%"
						return {_team}
			case 1:
				if skript-yaml node "GameAPI.%loop-value%.Players" from "%loop-value%" has value:
					set {_listplayer::*} to skript-yaml list "GameAPI.%loop-value-1%.Players" from "%loop-value-1%"
					loop {_listplayer::*}:
						if loop-value-2 is "%{_player}%":
							set {_namemg} to loop-value-2
					set {gameapi::lastminigame} to "%{_namemg}%"
					return {_namemg}

#===== Queue system =====

get plural expression queue (of|from) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_namemg} to expression-1
	broadcast "1"
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastminigame} to "%{_namemg}%"
		if expression-2 is set:
			set {_namemg} to expression-2
		if yaml "%{_namemg}%" is not loaded:
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		if skript-yaml node "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%" has value:
			set {_players::*} to skript-yaml list "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%"
			return {_players::*}
		return

change plural expression queue (of|from) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_namemg} to expression-1
	set {_session} to expression-2
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastminigame} to "%{_namemg}%"
		if {_session} is set:
			set {_namemg} to {_session}
	#	if yaml "%{_namemg}%" is not loaded:	
	#		load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set {_cv::*} to change value
		if skript-yaml node "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%" has value:
			set {_queue::*} to skript-yaml list "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%"
			loop {_queue::*}: #loop-value
				loop {_cv::*}:
					if loop-value-1 is loop-value-2:
						remove "%loop-value-2%" from skript-yaml list "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%"
			save yaml "%{_namemg}%"
		change mode is to add:
			loop {_cv::*}:
				add "%loop-value%" to skript-yaml list "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%"
			save yaml "%{_namemg}%"
		change mode is to remove:
			loop {_cv::*}:
				remove "%loop-value%" from skript-yaml list "GameAPI.%{_namemg}%.Queue" from "%{_namemg}%"
			save yaml "%{_namemg}%"

#===== Event-mini game =====
get expression event-mini(-| |)game:
	return {gameapi::lastminigame}

#===== Event-team =====
get expression event-team:
	return {gameapi::lastteam}

#===== All players in team =====

get plural expression [all] players (from|of) [[the] team] %string% (of|from) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_name} to expression-1
	set {_namemg} to expression-2
	set {_session} to expression-3
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastteam} to "%{_name}%"
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set {_players::*} to yaml nodes "GameAPI.%{_namemg}%.Teams.Team_%{_name}%" from "%{_namemg}%"
		return {_players::*}
	else:
		return false

#===== All teams =====

get plural expression [all] teams (from|of) [[the] mini[s](-| )game[s] [named]] %string% [using session %-string%]:
	set {_namemg} to expression-1
	set {_session} to expression-2
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastteam} to "%{_name}%"
		if {_session} is set:
			set {_namemg} to {_session}
		if yaml "%{_namemg}%" is not loaded:	
			load "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set {_listnodes::*} to yaml nodes "GameAPI.%{_namemg}%.Teams" from "%{_namemg}%"
		replace all "Team_" with "" in {_listnodes::*}
		return {_listnodes::*}
	else:
		return false

#===== All minis-games =====

get plural expression [all] minis(-| )games:
	set {_listmg::*} to directory "plugins/GameAPI/"'s files
	return {_listmg::*}

#===== All sessions =====

get plural expression [all] sessions (of|from) [[the] mini[s](-| )game[s] [named]] %string%:
	set {_namemg} to expression-1
	if file "plugins/GameAPI/%{_namemg}%.yml" exists:
		set {gameapi::lastminigame} to "%{_namemg}%"
		if yaml "%{_namemg}%" is not loaded:
			load yaml "plugins/GameAPI/%{_namemg}%.yml" as "%{_namemg}%"
		set {_sessions::*} to skript-yaml node "GameAPI" from "%{_namemg}%"
		set {_m} to skript-yaml value "GameAPI.%{_namemg}%.Teams.Team_blue.Name" from "%{_namemg}%"
		return {_sessions::*}
	else:
		return false

#To do:
# - Refaire le systeme de leave pour prendre en compte plusieurs joueurs et le combiner avec la syntax de mini jeu
